name: karsajobs CI
on: 
  push:
    branches:
      - "karsajobs"
  workflow_dispatch:

jobs:
  lint-dockerfile:
    runs-on: ubuntu-latest
    steps:
      - name: check out repo 
        uses: actions/checkout@v3
      - name: check dockerfile using hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile

  code-scanning:
    runs-on: ubuntu-latest
    steps:
      - name: check out repo 
        uses: actions/checkout@v3
      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          args: '-no-fail -fmt=json -out gosec-results.json ./...'
      - name: upload artifatcs
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: gosec-findings
          path: gosec-results.json

  test-app:
    runs-on: ubuntu-latest
    steps:
      - name: check out repo 
        uses: actions/checkout@v3
      - name: Setup Go 1.21.4
        uses: actions/setup-go@v4
        with:
          go-version: '1.21.4'
      - name: execute karsajobs test
        run: go test -v -short --count=1 $(go list ./...)

  build-app:
    env:
      IMAGE: ${{ vars.CR_URL }}/${{ secrets.CR_USERNAME }}/${{ vars.CR_REPOSITORY }}
    needs: [test-app, lint-dockerfile, code-scanning]
    runs-on: ubuntu-latest
    steps:
      - name: check out repo 
        uses: actions/checkout@v3
      - name: Set up Docker
        uses: docker-practice/actions-setup-docker@v1
        with:
          docker_version: '20.10.7'
      - name: prepare image metadata
        id: prep
        run: |
          BRANCH=${GITHUB_REF##*/}
          TS=$(date +%s)
          BUILD_ID="${BRANCH}-${TS}"
          LATEST_ID=latest
          echo BUILD_ID=${BUILD_ID} >> $GITHUB_OUTPUT
          echo LATEST_ID=${LATEST_ID} >> $GITHUB_OUTPUT 
      - name: login to ${{ vars.CR_URL }}
        uses: docker/login-action@v2
        with:
          # registry: ${{ vars.CR_URL }}
          username: ${{ secrets.CR_USERNAME }}
          password: ${{ secrets.CR_PAT }}
      - name: build image
        run: docker build -t ${{ env.IMAGE }}:${{ steps.prep.outputs.BUILD_ID }} .
      - name: scan image using docker scout
        run: |
          curl -fsSL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh -o install-scout.sh
          sh install-scout.sh
          docker scout quickview
          docker scout cves
      - name: push image
        run: |
          docker push ${{ env.IMAGE }}:${{ steps.prep.outputs.BUILD_ID }}

      # - name: build and push docker image ${{ vars.CR_REPOSITORY }}
      #   uses: docker/build-push-action@v3
      #   with:
      #     push: true
      #     tags: |
      #       ${{ env.IMAGE }}:${{ steps.prep.outputs.BUILD_ID }}
      #       ${{ env.IMAGE }}:${{ steps.prep.outputs.LATEST_ID }} 
      # - name: Docker Scout
      #   id: docker-scout
      #   uses: docker/scout-action@v1.2.2
      #   with:
      #     command: cves
      #     image: ${{ env.IMAGE }}:${{ steps.prep.outputs.BUILD_ID }}
      #     only-severities: critical,high
      #     exit-code: true

      
      
